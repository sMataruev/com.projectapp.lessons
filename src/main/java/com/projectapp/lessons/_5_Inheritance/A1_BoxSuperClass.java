package com.projectapp.lessons._5_Inheritance;

/**
 * Наследование в Java.
 * в Java можно наследовать людой класс из любой библиотеки (если она подключена)
 * d Java нет множественного наследования! как это было в C++ или других языках
 * Чтобы наследовать класс нужно ввести слово extends
 * <p>
 * Когда создается класс и его наследует другой класс то, тот класс от которого наследовались
 * будет считаться СУПЕР КЛАССОМ а тот кто наследовал ПОДКЛАССОМ (class VK extends B)
 * <p>
 * Когда класс является ПОДКЛАССОМ для другого класса, это не значит что класс не может создавать
 * свои экземпляры класса. Он считается полностью независимым классом.
 * <p>
 * Так же ПОДКЛАСС может являться СУПЕР КЛАССОМ для других классов.
 * Ни один класс не может быть СУПЕР КЛАССОМ для себя самого!
 * <p>
 * ПОДКЛАССЫ видят поля и методы с модификатором доступа  public и protected и могут их использовать
 * в личных целях.
 * Поля и Методы обьвленны как private увидеть из ПОДКЛАССА нельзя! эти поля могут быть использованы
 * только в том классе, где обьявлены. Они видны в пределах собственного класса и только!
 * <p>
 * Главное преимущество наследования состоит в том, что, как только будет создан
 * суперкласс, определяющий общие свойства ряда объектов, его можно использовать
 * для разработки любого количества более специализированных классов.
 * <p>
 * Напомню, как только суперкласс , который определяет общие свойства объекта,
 * будет создан , он может наследоваться для разработки специализированных
 * классов. Каждый подкласс добавляет собственные особые свойства. В этом и состоит
 * сущность наследования.
 * <p>
 * Ссылочной переменной из суперкласса может быть присвоена ссылка на любой
 * подкласс, производный от этого суперкласса.
 * <p>
 * Из подкласса можно вызывать конструктор, определенный в его суперклассе,
 * используя следующую форму ключевого слова super:
 * Вызов метода super() всегда должен быть первым оператором,
 * выполняемым в конструкторе подкласса.
 */

public class A1_BoxSuperClass {

    /*private*/ public double widht;
    /*private*/ public double height;
    /*private*/ public double depht;


    //передаем объект конструктору
    public A1_BoxSuperClass(A1_BoxSuperClass ob) {
        widht = ob.widht;
        height = ob.height;
        depht = ob.height;
    }

    //конструктор с параметрами
    public A1_BoxSuperClass(double widht, double height, double depht) {
        this.widht = widht;
        this.height = height;
        this.depht = depht;
    }

    //конструктор без параметров
    public A1_BoxSuperClass() {
        widht = -1;
        height = -1;
        depht = -1;
    }

    //конструктор с один параметром
    public A1_BoxSuperClass(double d) {
        widht = height = depht = d;
    }

    public double show() {
        return widht * height * depht;
    }


}

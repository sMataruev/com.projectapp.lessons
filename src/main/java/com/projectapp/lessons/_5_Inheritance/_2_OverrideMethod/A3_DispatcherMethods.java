package com.projectapp.lessons._5_Inheritance._2_OverrideMethod;

/**
 * Динамическая диспетчеризация методов
 * Переопределение методов служит основой для одного из наиболее эффективных принципов
 * в Java - динамuческой диспетчирезации методов
 *
 * Динамическая диспетчеризация методов - это механизм, с помощью которого вызов
 * переопределенного метода разрешается во время выполнения, а не компиляции.
 * Динамическая диспетчеризация методов важна потому,  что благодаря ей полиморфизм в Java
 * реализуется во время выполнения.
 *
 * Ссылочная переменная из суперкласса может ссылаться на объект ЛЮБОГО подкласса.
 *
 * когда переопределенный метод вызывается по ссылке на суперкласс,
 * нужный вариант этого метода выбирается в java (JMV)
 * в зависимости от типа объекта, на который делается ссылка в момент вызова.
 *
 * Следовательно, этот выбор Делается во время выполнения.
 * По ссылке на разные
 * типы объектов будут вызываться разные варианты переопределенного метода.
 *
 * Иначе говоря, вариант переопределенного метода выбирается для выполнения
 * в зависимости от типа объекmа, на который делается ссылка, а не типа ссылочной
 * переменной. Так, если суперкласс содержит метод, переопределяемый в подклассе,
 * то по ссылке на разные типы объектов через ссылочную переменную из суперкласса
 * будут выполняться разные варианты этого метода.
 *
 *
 */
public class A3_DispatcherMethods {

    public void show() {
        System.out.println("A3_DispatcherMethods метод 1");

    }


}
